/* Copyright (C) 2016-2018 INRA
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef ORG_VLEPROJECT_BARYONYX_SOLVER_CORE_UTILS
#define ORG_VLEPROJECT_BARYONYX_SOLVER_CORE_UTILS

#include <baryonyx/core>

#include <tuple>

namespace baryonyx {

/**
 * @brief Compute the minimal and maximal values of an objective function.
 * @details For each negative factor, add factor to the minimal value, for each
 *     positive factor, add factor to the maximal value.
 *
 * @param obj [description]
 * @param j [description]
 *
 * @return [description]
 */
inline std::tuple<double, double>
compute_min_max_objective_function(const objective_function& obj) noexcept
{
    auto ret = std::make_tuple(obj.value, obj.value);

    for (const auto& elem : obj.elements)
        if (elem.factor < 0)
            std::get<0>(ret) += elem.factor;
        else if (elem.factor > 0)
            std::get<1>(ret) += elem.factor;

    return ret;
}

inline constexpr solver_parameters::mode_type operator&(
  solver_parameters::mode_type x,
  solver_parameters::mode_type y)
{
    using underlying_type =
      typename std::underlying_type<solver_parameters::mode_type>::type;

    return static_cast<solver_parameters::mode_type>(
      static_cast<underlying_type>(x) & static_cast<underlying_type>(y));
}

inline constexpr solver_parameters::mode_type
operator|(solver_parameters::mode_type x, solver_parameters::mode_type y)
{
    using underlying_type =
      typename std::underlying_type<solver_parameters::mode_type>::type;

    return static_cast<solver_parameters::mode_type>(
      static_cast<underlying_type>(x) | static_cast<underlying_type>(y));
}

inline constexpr solver_parameters::mode_type
operator^(solver_parameters::mode_type x, solver_parameters::mode_type y)
{
    using underlying_type =
      typename std::underlying_type<solver_parameters::mode_type>::type;

    return static_cast<solver_parameters::mode_type>(
      static_cast<underlying_type>(x) ^ static_cast<underlying_type>(y));
}

inline constexpr solver_parameters::mode_type
operator~(solver_parameters::mode_type x)
{
    using underlying_type =
      typename std::underlying_type<solver_parameters::mode_type>::type;

    return static_cast<solver_parameters::mode_type>(
      ~static_cast<underlying_type>(x));
}

inline solver_parameters::mode_type&
operator&=(solver_parameters::mode_type& x, solver_parameters::mode_type y)
{
    x = x & y;
    return x;
}

inline solver_parameters::mode_type&
operator|=(solver_parameters::mode_type& x, solver_parameters::mode_type y)
{
    x = x | y;
    return x;
}

inline solver_parameters::mode_type&
operator^=(solver_parameters::mode_type& x, solver_parameters::mode_type y)
{
    x = x ^ y;
    return x;
}

} // namespace baryonyx

#endif
