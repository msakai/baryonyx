/* Copyright (C) 2016-2019 INRA
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef ORG_VLEPROJECT_BARYONYX_SOLVER_CORE_OUT
#define ORG_VLEPROJECT_BARYONYX_SOLVER_CORE_OUT

#include <baryonyx/core>

#include <fmt/format.h>

template<>
struct fmt::formatter<baryonyx::file_format_error_tag>
  : fmt::formatter<string_view>
{
    template<typename FormatContext>
    auto format(baryonyx::file_format_error_tag c, FormatContext& ctx)
    {
        string_view name = "unknown";

        switch (c) {
        case baryonyx::file_format_error_tag::success:
            name = "success";
            break;
        case baryonyx::file_format_error_tag::file_not_found:
            name = "file_not_found";
            break;
        case baryonyx::file_format_error_tag::bad_end_of_file:
            name = "bad_end_of_file";
            break;
        case baryonyx::file_format_error_tag::bad_general:
            name = "bad_general";
            break;
        case baryonyx::file_format_error_tag::bad_binary:
            name = "bad_binary";
            break;
        case baryonyx::file_format_error_tag::bad_objective_function_type:
            name = "bad_objective_function_type";
            break;
        case baryonyx::file_format_error_tag::bad_objective:
            name = "bad_objective";
            break;
        case baryonyx::file_format_error_tag::bad_objective_quadratic:
            name = "bad_objective_quadratic";
            break;
        case baryonyx::file_format_error_tag::bad_bound:
            name = "bad_bound";
            break;
        case baryonyx::file_format_error_tag::bad_end:
            name = "bad_end";
            break;
        case baryonyx::file_format_error_tag::bad_constraint:
            name = "bad_constraint";
            break;
        case baryonyx::file_format_error_tag::too_many_variables:
            name = "too_many_variables";
            break;
        case baryonyx::file_format_error_tag::too_many_constraints:
            name = "too_many_constraints";
            break;
        case baryonyx::file_format_error_tag::bad_name:
            name = "bad_name";
            break;
        case baryonyx::file_format_error_tag::empty_context:
            name = "empty_context";
            break;
        }

        return formatter<string_view>::format(name, ctx);
    }
};

template<>
struct fmt::formatter<baryonyx::problem_definition_error_tag>
  : fmt::formatter<string_view>
{
    template<typename FormatContext>
    auto format(baryonyx::problem_definition_error_tag c, FormatContext& ctx)
    {
        string_view name = "unknown";

        switch (c) {
        case baryonyx::problem_definition_error_tag::empty_variables:
            name = "empty_variables";
            break;
        case baryonyx::problem_definition_error_tag::empty_objective_function:
            name = "empty_objective_function";
            break;
        case baryonyx::problem_definition_error_tag::variable_not_used:
            name = "variable_not_used";
            break;
        case baryonyx::problem_definition_error_tag::bad_bound:
            name = "bad_bound";
            break;
        case baryonyx::problem_definition_error_tag::multiple_constraint:
            name = "multiple_constraint";
            break;
        }

        return formatter<string_view>::format(name, ctx);
    }
};

template<>
struct fmt::formatter<baryonyx::result_status> : fmt::formatter<string_view>
{
    template<typename FormatContext>
    auto format(baryonyx::result_status c, FormatContext& ctx)
    {
        string_view name = "unknown";

        switch (c) {
        case baryonyx::result_status::success:
            name = "success";
            break;
        case baryonyx::result_status::internal_error:
            name = "internal_error";
            break;
        case baryonyx::result_status::uninitialized:
            name = "uninitialized";
            break;
        case baryonyx::result_status::time_limit_reached:
            name = "time_limit_reached";
            break;
        case baryonyx::result_status::kappa_max_reached:
            name = "kappa_max_reached";
            break;
        case baryonyx::result_status::limit_reached:
            name = "limit_reached";
            break;
        case baryonyx::result_status::empty_context:
            name = "empty_context";
            break;
        }

        return formatter<string_view>::format(name, ctx);
    }
};

template<>
struct fmt::formatter<baryonyx::solver_parameters::pre_constraint_order>
  : fmt::formatter<string_view>
{
    template<typename FormatContext>
    auto format(baryonyx::solver_parameters::pre_constraint_order c,
                FormatContext& ctx)
    {
        string_view name = "unknown";

        switch (c) {
        case baryonyx::solver_parameters::pre_constraint_order::none:
            name = "none";
            break;
        case baryonyx::solver_parameters::pre_constraint_order::memory:
            name = "memory";
            break;
        case baryonyx::solver_parameters::pre_constraint_order::
          less_greater_equal:
            name = "less-greater-equal";
            break;
        case baryonyx::solver_parameters::pre_constraint_order::
          less_equal_greater:
            name = "less-equal-greater";
            break;
        case baryonyx::solver_parameters::pre_constraint_order::
          greater_less_equal:
            name = "greater-less-equal";
            break;
        case baryonyx::solver_parameters::pre_constraint_order::
          greater_equal_less:
            name = "greater-equal-less";
            break;
        case baryonyx::solver_parameters::pre_constraint_order::
          equal_less_greater:
            name = "equal-less-greater";
            break;
        case baryonyx::solver_parameters::pre_constraint_order::
          equal_greater_less:
            name = "equal-greater-less";
            break;
        case baryonyx::solver_parameters::pre_constraint_order::p1:
            name = "p1";
            break;
        case baryonyx::solver_parameters::pre_constraint_order::p2:
            name = "p2";
            break;
        case baryonyx::solver_parameters::pre_constraint_order::p3:
            name = "p3";
            break;
        case baryonyx::solver_parameters::pre_constraint_order::p4:
            name = "p4";
            break;
        }

        return formatter<string_view>::format(name, ctx);
    }
};

template<>
struct fmt::formatter<baryonyx::solver_parameters::init_policy_type>
  : fmt::formatter<string_view>
{
    template<typename FormatContext>
    auto format(baryonyx::solver_parameters::init_policy_type c,
                FormatContext& ctx)
    {
        string_view name = "unknown";

        switch (c) {
        case baryonyx::solver_parameters::init_policy_type::bastert:
            name = "bastert";
            break;
        case baryonyx::solver_parameters::init_policy_type::pessimistic_solve:
            name = "pessimistic-solve";
            break;
        case baryonyx::solver_parameters::init_policy_type::optimistic_solve:
            name = "optimistic-solve";
            break;
        }

        return formatter<string_view>::format(name, ctx);
    }
};

template<>
struct fmt::formatter<baryonyx::solver_parameters::floating_point_type>
  : fmt::formatter<string_view>
{
    template<typename FormatContext>
    auto format(baryonyx::solver_parameters::floating_point_type c,
                FormatContext& ctx)
    {
        string_view name = "unknown";

        switch (c) {
        case baryonyx::solver_parameters::floating_point_type::float_type:
            name = "float";
            break;
        case baryonyx::solver_parameters::floating_point_type::double_type:
            name = "double";
            break;
        case baryonyx::solver_parameters::floating_point_type::longdouble_type:
            name = "longdouble";
            break;
        }

        return formatter<string_view>::format(name, ctx);
    }
};

template<>
struct fmt::formatter<baryonyx::solver_parameters::constraint_order>
  : fmt::formatter<string_view>
{
    template<typename FormatContext>
    auto format(baryonyx::solver_parameters::constraint_order c,
                FormatContext& ctx)
    {
        string_view name = "unknown";

        switch (c) {
        case baryonyx::solver_parameters::constraint_order::none:
            name = "none";
            break;
        case baryonyx::solver_parameters::constraint_order::reversing:
            name = "reversing";
            break;
        case baryonyx::solver_parameters::constraint_order::random_sorting:
            name = "random-sorting";
            break;
        case baryonyx::solver_parameters::constraint_order::infeasibility_decr:
            name = "infeasibility-decr";
            break;
        case baryonyx::solver_parameters::constraint_order::infeasibility_incr:
            name = "infeasibility-incr";
            break;
        case baryonyx::solver_parameters::constraint_order::lagrangian_decr:
            name = "lagrangian-decr";
            break;
        case baryonyx::solver_parameters::constraint_order::lagrangian_incr:
            name = "lagrangian-incr";
            break;
        case baryonyx::solver_parameters::constraint_order::pi_sign_change:
            name = "pi-sign-change";
            break;
        case baryonyx::solver_parameters::constraint_order::cycle:
            name = "cycle";
            break;
        }

        return formatter<string_view>::format(name, ctx);
    }
};

template<>
struct fmt::formatter<baryonyx::solver_parameters::cost_norm_type>
  : fmt::formatter<string_view>
{
    template<typename FormatContext>
    auto format(baryonyx::solver_parameters::cost_norm_type c,
                FormatContext& ctx)
    {
        string_view name = "unknown";

        switch (c) {
        case baryonyx::solver_parameters::cost_norm_type::none:
            name = "none";
            break;
        case baryonyx::solver_parameters::cost_norm_type::random:
            name = "random";
            break;
        case baryonyx::solver_parameters::cost_norm_type::l1:
            name = "l1";
            break;
        case baryonyx::solver_parameters::cost_norm_type::l2:
            name = "l2";
            break;
        case baryonyx::solver_parameters::cost_norm_type::loo:
            name = "loo";
            break;
        }

        return formatter<string_view>::format(name, ctx);
    }
};

template<>
struct fmt::formatter<baryonyx::solver_parameters::mode_type>
  : fmt::formatter<string_view>
{
    template<typename FormatContext>
    auto format(baryonyx::solver_parameters::mode_type c, FormatContext& ctx)
    {
        using underlying_type =
          std::underlying_type<baryonyx::solver_parameters::mode_type>::type;

        string_view name = "disabled";

        if (static_cast<underlying_type>(c) &
            static_cast<underlying_type>(
              baryonyx::solver_parameters::mode_type::branch)) {
            if (static_cast<underlying_type>(c) &
                static_cast<underlying_type>(
                  baryonyx::solver_parameters::mode_type::manual))
                name = "manual-and-branch";
            else if (static_cast<underlying_type>(c) &
                     static_cast<underlying_type>(
                       baryonyx::solver_parameters::mode_type::nlopt))
                name = "nlopt-and-branch";
            else
                name = "branch";
        } else {
            if (static_cast<underlying_type>(c) &
                static_cast<underlying_type>(
                  baryonyx::solver_parameters::mode_type::manual))
                name = "manual";
            else if (static_cast<underlying_type>(c) &
                     static_cast<underlying_type>(
                       baryonyx::solver_parameters::mode_type::nlopt))
                name = "nlopt";
        }

        return formatter<string_view>::format(name, ctx);
    }
};

template<>
struct fmt::formatter<baryonyx::solver_parameters::preprocessor_options>
  : fmt::formatter<string_view>
{
    template<typename FormatContext>
    auto format(baryonyx::solver_parameters::preprocessor_options c,
                FormatContext& ctx)
    {
        string_view name = "unknown";

        switch (c) {
        case baryonyx::solver_parameters::preprocessor_options::none:
            name = "none";
            break;
        case baryonyx::solver_parameters::preprocessor_options::all:
            name = "all";
            break;
        }

        return formatter<string_view>::format(name, ctx);
    }
};

template<>
struct fmt::formatter<baryonyx::solver_parameters::observer_type>
  : fmt::formatter<string_view>
{
    template<typename FormatContext>
    auto format(baryonyx::solver_parameters::observer_type c,
                FormatContext& ctx)
    {
        string_view name = "unknown";

        switch (c) {
        case baryonyx::solver_parameters::observer_type::none:
            name = "none";
            break;
        case baryonyx::solver_parameters::observer_type::pnm:
            name = "pnm";
            break;
        case baryonyx::solver_parameters::observer_type::file:
            name = "file";
            break;
        }

        return formatter<string_view>::format(name, ctx);
    }
};

template<>
struct fmt::formatter<baryonyx::solver_parameters::solver_type>
  : fmt::formatter<string_view>
{
    template<typename FormatContext>
    auto format(baryonyx::solver_parameters::solver_type c, FormatContext& ctx)
    {
        string_view name = "unknown";

        switch (c) {
        case baryonyx::solver_parameters::solver_type::bastert:
            name = "bastert";
            break;
        case baryonyx::solver_parameters::solver_type::random:
            name = "random";
            break;
        }

        return formatter<string_view>::format(name, ctx);
    }
};

template<>
struct fmt::formatter<baryonyx::solver_parameters::storage_type>
  : fmt::formatter<string_view>
{
    template<typename FormatContext>
    auto format(baryonyx::solver_parameters::storage_type c,
                FormatContext& ctx)
    {
        string_view name = "unknown";

        switch (c) {
        case baryonyx::solver_parameters::storage_type::one:
            name = "one";
            break;
        case baryonyx::solver_parameters::storage_type::bound:
            name = "bound";
            break;
        case baryonyx::solver_parameters::storage_type::five:
            name = "five";
            break;
        }

        return formatter<string_view>::format(name, ctx);
    }
};

#endif
