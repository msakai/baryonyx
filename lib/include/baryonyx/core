/* Copyright (C) 2016-2018 INRA
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef ORG_VLEPROJECT_BARYONYX_SOLVER_CORE
#define ORG_VLEPROJECT_BARYONYX_SOLVER_CORE

#include <algorithm>
#include <chrono>
#include <functional>
#include <limits>
#include <memory>
#include <stdexcept>
#include <string>
#include <tuple>
#include <unordered_map>
#include <utility>
#include <vector>

#include <ciso646>
#include <cstdarg>
#include <cstdio>

#if defined _WIN32 || defined __CYGWIN__
#define BARYONYX_HELPER_DLL_IMPORT __declspec(dllimport)
#define BARYONYX_HELPER_DLL_EXPORT __declspec(dllexport)
#define BARYONYX_HELPER_DLL_LOCAL
#else
#if __GNUC__ >= 4
#define BARYONYX_HELPER_DLL_IMPORT __attribute__((visibility("default")))
#define BARYONYX_HELPER_DLL_EXPORT __attribute__((visibility("default")))
#define BARYONYX_HELPER_DLL_LOCAL __attribute__((visibility("hidden")))
#else
#define BARYONYX_HELPER_DLL_IMPORT
#define BARYONYX_HELPER_DLL_EXPORT
#define BARYONYX_HELPER_DLL_LOCAL
#endif
#endif

#ifdef BARYONYX_DLL
#ifdef libbaryonyx_EXPORTS
#define BARYONYX_API BARYONYX_HELPER_DLL_EXPORT
#else
#define BARYONYX_API BARYONYX_HELPER_DLL_IMPORT
#endif
#define BARYONYX_LOCAL BARYONYX_HELPER_DLL_LOCAL
#define BARYONYX_MODULE BARYONYX_HELPER_DLL_EXPORT
#else
#define BARYONYX_API
#define BARYONYX_LOCAL
#define BARYONYX_MODULE BARYONYX_HELPER_DLL_EXPORT
#endif

namespace baryonyx {

/** @c index is used as accessors for all array. */
using index = int;

struct precondition_failure : std::logic_error
{
    precondition_failure(const char* msg)
      : std::logic_error(msg)
    {}
};

struct postcondition_failure : std::logic_error
{
    postcondition_failure(const char* msg)
      : std::logic_error(msg)
    {}
};

struct numeric_cast_failure : public std::exception
{
    const char* what() const noexcept override
    {
        return "numeric cast error: loss of range in numeric_cast";
    }
};

struct file_access_error
{
    std::string file;
    int error;
};

struct file_access_failure : std::runtime_error
{
    file_access_failure(std::string file, int error)
      : std::runtime_error("file_access_failure")
      , m_error{ std::move(file), error }
    {}

    std::string file() const
    {
        return m_error.file;
    }

    int error() const
    {
        return m_error.error;
    }

private:
    file_access_error m_error;
};

enum class file_format_error_tag
{
    end_of_file = 1,
    unknown,
    already_defined,
    incomplete,
    bad_name,
    bad_operator,
    bad_integer,
    bad_objective_function_type,
    bad_bound,
    bad_function_element,
    bad_constraint,
    too_many_variables,
    too_many_constraints
};

struct file_format_error
{
    std::string element;
    int line;
    int column;
    file_format_error_tag tag;
};

struct file_format_failure : std::runtime_error
{
    file_format_failure(std::string element,
                        file_format_error_tag failure,
                        int line,
                        int column)
      : std::runtime_error("file_format_failure")
      , m_error{ std::move(element), line, column, failure }
    {}

    file_format_failure(file_format_error_tag failure, int line, int column)
      : std::runtime_error("file_format_failure")
      , m_error{ std::string(), line, column, failure }
    {}

    file_format_failure(file_format_error_tag failure)
      : std::runtime_error("file_format_failure")
      , m_error{ std::string(), -1, -1, failure }
    {}

    std::string element() const
    {
        return m_error.element;
    }

    int line() const
    {
        return m_error.line;
    }

    int column() const
    {
        return m_error.column;
    }

    file_format_error_tag failure() const
    {
        return m_error.tag;
    }

private:
    file_format_error m_error;
};

enum class problem_definition_error_tag
{
    empty_variables = 1,
    empty_objective_function,
    variable_not_used,
    bad_bound,
    multiple_constraint,
};

struct problem_definition_error
{
    std::string element;
    problem_definition_error_tag tag;
};

struct problem_definition_failure : std::runtime_error
{
    problem_definition_failure(std::string element,
                               problem_definition_error_tag failure)
      : std::runtime_error("problem_definition_failure")
      , m_error{ std::move(element), failure }
    {}

    std::string element() const
    {
        return m_error.element;
    }

    problem_definition_error_tag failure() const
    {
        return m_error.tag;
    }

private:
    problem_definition_error m_error;
};

enum class solver_error_tag
{
    no_solver_available = 1,
    unrealisable_constraint,
    not_enough_memory
};

struct solver_error
{
    solver_error_tag tag;
};

struct solver_failure : std::runtime_error
{
    solver_failure(solver_error_tag failure)
      : std::runtime_error("solver_failure")
      , m_error{ failure }
    {}

    solver_error_tag failure() const
    {
        return m_error.tag;
    }

private:
    solver_error m_error;
};

/**
 * @brief @c baryonyx::parameter is a simple class to represent a union between
 *     an integer, a real and a string (resp. @c int, @c double and @c
 *     std::string).
 *
 * @details Waiting for a compiler with the @c std::optional class, @c
 *     baryonyx::parameter implements an union between a @c int, a @c double
 *     and a @c std::string. @c baryonyx::parameter, by default, defines a @c
 *     int with the value of @c 0. Use the @c baryonyx::parameter::type
 *     function to get the current type stored into the @c baryonyx::parameter.
 */
class BARYONYX_API parameter
{
public:
    enum class tag
    {
        integer,
        real,
        string
    };

    union
    {
        int l;
        double d;
        std::string s;
    };

    tag type{ tag::integer };

    parameter()
      : l(0)
    {}

    parameter(int value_)
      : l(value_)
      , type(tag::integer)
    {}

    parameter(double value_)
      : d(value_)
      , type(tag::real)
    {}

    parameter(std::string value_)
      : s(std::move(value_))
      , type(tag::string)
    {}

    parameter(const char* value_)
      : s(value_)
      , type(tag::string)
    {}

    parameter(const parameter& w)
      : type(w.type)
    {
        switch (w.type) {
        case tag::integer:
            l = w.l;
            break;
        case tag::real:
            d = w.d;
            break;
        case tag::string:
            new (&s) std::string(w.s);
            break;
        }
    }

    parameter(parameter&& w)
      : type(w.type)
    {
        switch (w.type) {
        case tag::integer:
            l = w.l;
            break;
        case tag::real:
            d = w.d;
            break;
        case tag::string:
            new (&s) std::string(w.s);
            break;
        }

        w.type = tag::integer;
        w.l = 0;
    }

    parameter& operator=(const parameter& w)
    {
        if (type == tag::string and w.type == tag::string) {
            s = w.s;
            return *this;
        }

        if (type == tag::string) {
            using std::string;
            s.~string();
        }

        switch (w.type) {
        case tag::integer:
            l = w.l;
            break;
        case tag::real:
            d = w.d;
            break;
        case tag::string:
            new (&s) std::string(w.s);
            break;
        }

        type = w.type;
        return *this;
    }

    parameter& operator=(parameter&& w)
    {
        if (type == tag::string and w.type == tag::string) {
            new (&s) std::string(w.s);
            w.type = tag::integer;
            w.l = 0;
            return *this;
        }

        if (type == tag::string) {
            using std::string;
            s.~string();
        }

        switch (w.type) {
        case tag::integer:
            l = w.l;
            break;
        case tag::real:
            d = w.d;
            break;
        case tag::string:
            new (&s) std::string(w.s);
            break;
        }

        type = w.type;

        w.type = tag::integer;
        w.l = 0;

        return *this;
    }

    parameter& operator=(double value)
    {
        if (type == tag::real) {
            d = value;
            return *this;
        }

        if (type == tag::string) {
            using std::string;
            s.~string();
        }

        type = tag::real;
        d = value;

        return *this;
    }

    parameter& operator=(int value)
    {
        if (type == tag::integer) {
            l = value;
            return *this;
        }

        if (type == tag::string) {
            using std::string;
            s.~string();
        }

        type = tag::integer;
        l = value;

        return *this;
    }

    parameter& operator=(const std::string& value)
    {
        if (type == tag::string) {
            s = value;
            return *this;
        }

        if (type == tag::string) {
            using std::string;
            s.~string();
        }

        type = tag::string;
        new (&s) std::string(value);

        return *this;
    }

    parameter& operator=(const char* value)
    {
        if (type == tag::string) {
            s = value;
            return *this;
        }

        if (type == tag::string) {
            using std::string;
            s.~string();
        }

        type = tag::string;
        new (&s) std::string(value);

        return *this;
    }

    ~parameter() noexcept
    {
        if (type == tag::string) {
            using std::string;
            s.~string();
        }
    }

    void swap(parameter& p)
    {
        parameter copy(*this);
        *this = p;
        p = copy;
    }
};

/**
 * @brief Stores logging system and parameters.
 *
 * @details @c baryonyx::context manages the logging system and stores a set of
 *     parameters for solvers. Default, the logging system is active and use
 *     @c stdout C file structure. Define @c BARYONYX_DISABLE_LOGGING as
 *     preprocessor value to hide debug logging message.
 *
 *     The implementation of this class is hidden into private include to
 *     ensure a stable ABI of the Baryonyx library.
 */
struct context;

/**
 * @brief Stores the @c context into smart pointer.
 *
 * @details This type is use in many place of the Baryonyx library and
 *     application to simplify source code. We use a no copyable smart pointer
 *     to ensure thread safe library. Each thread must use its own @c context.
 *     Use the @c copy_context function to simplify the copy. We provide a free
 *     function to delete context pointer to avoid context publication.
 */
using context_ptr = std::unique_ptr<context, void (*)(context*)>;

BARYONYX_API context_ptr
make_context(FILE* f = stdout, int verbose_level = 6);

BARYONYX_API context_ptr
make_context(std::function<void(int, std::string)> logger,
             int verbose_level = 6);

BARYONYX_API context_ptr
copy_context(const context_ptr& ctx, FILE* f = stdout);

BARYONYX_API context_ptr
copy_context(const context_ptr& ctx,
             std::function<void(int, std::string)> logger);

BARYONYX_API context_ptr
copy_context(const context_ptr& ctx, FILE* f, int verbose_level);

BARYONYX_API context_ptr
copy_context(const context_ptr& ctx,
             std::function<void(int, std::string)> logger,
             int verbose_level);

BARYONYX_API void
context_set_parameters(const context_ptr& ctx,
                       std::unordered_map<std::string, parameter>&& params);

BARYONYX_API void
context_set_parameter(const context_ptr& ctx,
                      std::string name,
                      parameter param);

enum class variable_type
{
    real,
    binary,
    general
};

enum class problem_solver_type
{
    equalities_01,
    equalities_101,
    equalities_Z,
    inequalities_01,
    inequalities_101,
    inequalities_Z
};

enum class objective_function_type
{
    undefined,
    maximize,
    minimize
};

enum class operator_type
{
    undefined,
    equal,
    greater,
    less,
};

struct variable_value
{
    variable_value()
      : min(0)
      , max(std::numeric_limits<int>::max())
      , type(variable_type::real)
    {}

    variable_value(int min_, int max_, variable_type type_)
      : min(min_)
      , max(max_)
      , type(type_)
    {}

    int min;
    int max;
    variable_type type;
};

struct variables
{
    std::vector<std::string> names;
    std::vector<variable_value> values;
};

struct function_element
{
    function_element() = default;

    function_element(int factor_, index variable_index_) noexcept
      : factor(factor_)
      , variable_index(variable_index_)
    {}

    int factor = { 0 };
    index variable_index{ -1 };
};

struct objective_function_element
{
    objective_function_element(double factor_, index variable_index_) noexcept
      : factor(factor_)
      , variable_index(variable_index_)
    {}

    double factor = { 0 };
    index variable_index{ -1 };
};

struct constraint
{
    std::string label;
    std::vector<function_element> elements;
    int value = { 0 };
    int id;
};

struct objective_function
{
    std::vector<objective_function_element> elements;
    double value = { 0 };
};

struct affected_variables
{
    void push_back(std::string name, bool value)
    {
        names.emplace_back(name);
        values.emplace_back(value);
    }

    std::vector<std::string> names;
    std::vector<bool> values;
};

struct problem
{
    objective_function objective;

    std::vector<constraint> equal_constraints;
    std::vector<constraint> greater_constraints;
    std::vector<constraint> less_constraints;

    variables vars;
    affected_variables affected_vars;

    objective_function_type type = { objective_function_type::maximize };

    problem_solver_type problem_type = { problem_solver_type::equalities_01 };
};

/**
 * @details Compute the number of constraints of the @c baryonyx::problem.
 *
 * @param pb An baryonyx::problem.
 * @return The number of constraints in the @c baryonyx::problem.
 */
inline std::size_t
size(const baryonyx::problem& pb) noexcept
{
    return pb.equal_constraints.size() + pb.greater_constraints.size() +
           pb.less_constraints.size();
}

/**
 * @details Recover all memory allocated for all container of the @c
 *     baryonyx::problem. After this function, the @c baryonyx::problem is
 *     completely empty of data and can be reuse.
 *
 * @param pb The problem to clear.
 */
inline void
clear(baryonyx::problem& pb) noexcept
{
    std::vector<objective_function_element>().swap(pb.objective.elements);

    std::vector<constraint>().swap(pb.equal_constraints);
    std::vector<constraint>().swap(pb.greater_constraints);
    std::vector<constraint>().swap(pb.less_constraints);

    std::vector<std::string>().swap(pb.vars.names);
    std::vector<variable_value>().swap(pb.vars.values);

    std::vector<std::string>().swap(pb.affected_vars.names);
    std::vector<bool>().swap(pb.affected_vars.values);
}

enum class result_status
{
    success,
    internal_error,
    uninitialized,
    time_limit_reached,
    kappa_max_reached,
    limit_reached
};

struct solution
{
    solution() = default;

    solution(const std::vector<bool>& variables_, double value_)
      : variables(variables_)
      , value(value_)
    {}

    std::vector<bool> variables;
    double value;
};

struct result
{
    std::string method;

    affected_variables affected_vars;

    std::vector<std::string> variable_name;
    std::vector<solution> solutions;

    double duration = 0.0;
    index loop = 0;
    index variables = 0;
    index constraints = 0;
    index remaining_constraints = std::numeric_limits<index>::max();

    result_status status;

    result()
      : status(result_status::uninitialized)
    {}

    result(result_status status_)
      : status(status_)
    {}

    operator bool() const
    {
        return status == result_status::success;
    }
};

inline std::tuple<double, double>
compute_min_max_objective_function(const problem& pb) noexcept
{
    std::tuple<double, double> ret{ pb.objective.value, pb.objective.value };

    for (const auto& elem : pb.objective.elements)
        if (elem.factor < 0)
            std::get<0>(ret) += elem.factor;
        else if (elem.factor > 0)
            std::get<1>(ret) += elem.factor;
        else
            std::get<1>(ret) += 1;

    return ret;
}

/**
 * Read a @e lp file from the @e file.
 *
 * @exception baryonyx::file_format_error, baryonyx::file_access_error,
 *     std::system_error.
 */
BARYONYX_API
problem
make_problem(const baryonyx::context_ptr& ctx, const std::string& filename);

/**
 * Read a @e lp file from the @e is stream.
 *
 * @exception baryonyx::file_format_error, baryonyx::file_access_error,
 *     std::system_error.
 */
BARYONYX_API
problem
make_problem(const baryonyx::context_ptr& ctx, std::istream& is);

BARYONYX_API
result
make_result(const baryonyx::context_ptr& ctx, const std::string& filename);

BARYONYX_API
result
make_result(const baryonyx::context_ptr& ctx, std::istream& is);

/**
 * Write @e lp problem into a stream.
 *
 */
BARYONYX_API
std::ostream&
operator<<(std::ostream& os, const problem& p);

/**
 * @brief Cleanup the @p pb problem.
 * @details Remove already affected variables, duplicated constraints from the
 *     problem @p pb.
 *
 * @param pb in out parameter.
 *
 * @exception std::bad_alloc
 * @exception baryonyx::postcondition_failure
 * @exception baryonyx::precondition_failure
 */
BARYONYX_API
void
preprocess(const baryonyx::context_ptr& ctx, problem& pb);

/**
 * @details Try to solve or find a feasible solution for the @c
 *     baryonyx::problem.
 *
 * @param pb Problem definition.
 *
 * @exception baryonyx::solver_error
 * @exception baryonyx::problem_definition
 */
BARYONYX_API result
solve(const baryonyx::context_ptr& ctx, problem& pb);

/**
 * @details Try to optimize the @c baryonyx::problem with a set of
 *     parameters.
 *
 * @param pb Problem definition.
 *
 * @return A representation of the result.
 *
 * @throw @c baryonyx::solver_error.
 */
BARYONYX_API
result
optimize(const baryonyx::context_ptr& ctx, problem& pb);

BARYONYX_API
bool
is_valid_solution(const problem& pb, const std::vector<bool>& variable_value);

BARYONYX_API
double
compute_solution(const problem& pb, const std::vector<bool>& variable_value);

BARYONYX_API
bool
is_valid_solution(const problem& pb, const result& r);

BARYONYX_API
double
compute_solution(const problem& pb, const result& r);
}

#endif
