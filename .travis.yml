language: cpp

sudo: false

os:
  - linux
  - osx

branches:
  only:
    - master
    - test

addons:
  apt:
    packages: &common_packages
      - cmake
      - gdb

env:
  matrix:
    - BOGUS_JOB=true

matrix:
  exclude:
    - env: BOGUS_JOB=true

  include:
    - os: linux
      dist: xenial
      env: CXX_COMPILER=g++-7 CXXSTD=c++17 WITH_COVERAGE=0
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - *common_packages
            - g++-7
    - os: linux
      dist: xenial
      env: CXX_COMPILER=g++-8 CXXSTD=c++17 WITH_COVERAGE=0
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - *common_packages
            - g++-8
    - os: linux
      dist: xenial
      env: CXX_COMPILER=g++-8 CXXSTD=c++17 WITH_COVERAGE=1
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - *common_packages
            - g++-8
    - os: linux
      env: CXX_COMPILER=clang++-6.0 CXXSTD=c++17 WITH_COVERAGE=0
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-6.0
          packages:
            - *common_packages
            - clang-6.0
            - g++-7
    - os: linux
      env: CXX_COMPILER=clang++-7 CXXSTD=c++17 WITH_COVERAGE=0
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-7
          packages:
            - *common_packages
            - clang-7
            - g++-7
    - os: linux
      env: CXX_COMPILER=clang++-8 CXXSTD=c++17 WITH_COVERAGE=0
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-8
          packages:
            - *common_packages
            - clang-8
            - g++-7
    - os: osx
      osx_image: xcode11.2
      env: CXX_COMPILER=clang++ CXXSTD=c++17 WITH_COVERAGE=0

before_install:
  - pip install --user cpp-coveralls

install:
  - cd ..
  - cd baryonyx
  - mkdir build
  - cd build
  - if [ "$WITH_COVERAGE" = "0" ]; then CXXFLAGS="-std=$CXXSTD" cmake -DCMAKE_CXX_COMPILER=$CXX_COMPILER -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_COLOR_MAKEFILE=OFF -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo .. ; fi
  - if [ "$WITH_COVERAGE" = "1" ]; then CXXFLAGS="-std=$CXXSTD -g -O0 --coverage -fprofile-arcs -ftest-coverage" cmake -DCMAKE_CXX_COMPILER=$CXX_COMPILER -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_COLOR_MAKEFILE=OFF -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_BUILD_TYPE=None .. ; fi

script:
  - make
  - sudo make install
  - if [ "$TRAVIS_OS_NAME" != "osx" ]; then gdb ./lib/testio -ex run -ex bt -ex kill -ex quit ; fi
  - if [ "$TRAVIS_OS_NAME" != "osx" ]; then gdb ./lib/testlib -ex run -ex bt -ex kill -ex quit ; fi
  - if [ "$TRAVIS_OS_NAME" != "osx" ]; then gdb ./lib/testsolver -ex run -ex bt -ex kill -ex quit ; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then ctest -V -R testio ; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then ctest -V -R testlib ; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then ctest -V -R testsolver ; fi
  - if [ "$WITH_COVERAGE" = "1" ]; then ctest -E testoptimizer ; fi

after_success:
  - coveralls --gcov-options '\-lp'

notifications:
  email:
    on_sucess: always
